// Code generated by MockGen. DO NOT EDIT.
// Source: github.go

// Package github is a generated GoMock package.
package github

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	git "gopkg.in/src-d/go-git.v4"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockClient) Clone(repoURI, dir string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", repoURI, dir)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockClientMockRecorder) Clone(repoURI, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockClient)(nil).Clone), repoURI, dir)
}

// Commit mocks base method.
func (m *MockClient) Commit(r *git.Repository, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", r, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockClientMockRecorder) Commit(r, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockClient)(nil).Commit), r, msg)
}

// GetRepoID mocks base method.
func (m *MockClient) GetRepoID(owner, repo string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoID", owner, repo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoID indicates an expected call of GetRepoID.
func (mr *MockClientMockRecorder) GetRepoID(owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoID", reflect.TypeOf((*MockClient)(nil).GetRepoID), owner, repo)
}

// ListRepoIssues mocks base method.
func (m *MockClient) ListRepoIssues(owner, repo, state string, labels []string) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoIssues", owner, repo, state, labels)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepoIssues indicates an expected call of ListRepoIssues.
func (mr *MockClientMockRecorder) ListRepoIssues(owner, repo, state, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoIssues", reflect.TypeOf((*MockClient)(nil).ListRepoIssues), owner, repo, state, labels)
}

// ListRepoIssuesSince mocks base method.
func (m *MockClient) ListRepoIssuesSince(owner, repo string, since time.Time, state string, labels []string) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoIssuesSince", owner, repo, since, state, labels)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepoIssuesSince indicates an expected call of ListRepoIssuesSince.
func (mr *MockClientMockRecorder) ListRepoIssuesSince(owner, repo, since, state, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoIssuesSince", reflect.TypeOf((*MockClient)(nil).ListRepoIssuesSince), owner, repo, since, state, labels)
}

// PullRequest mocks base method.
func (m *MockClient) PullRequest(owner, repo, title, head, body, baseBranch string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullRequest", owner, repo, title, head, body, baseBranch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullRequest indicates an expected call of PullRequest.
func (mr *MockClientMockRecorder) PullRequest(owner, repo, title, head, body, baseBranch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullRequest", reflect.TypeOf((*MockClient)(nil).PullRequest), owner, repo, title, head, body, baseBranch)
}

// Push mocks base method.
func (m *MockClient) Push(r *git.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockClientMockRecorder) Push(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockClient)(nil).Push), r)
}

// SearchIssuesByQuery mocks base method.
func (m *MockClient) SearchIssuesByQuery(query string) ([]github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIssuesByQuery", query)
	ret0, _ := ret[0].([]github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIssuesByQuery indicates an expected call of SearchIssuesByQuery.
func (mr *MockClientMockRecorder) SearchIssuesByQuery(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIssuesByQuery", reflect.TypeOf((*MockClient)(nil).SearchIssuesByQuery), query)
}

// SearchLabelsByQuery mocks base method.
func (m *MockClient) SearchLabelsByQuery(repoID int64, query string) ([]*github.LabelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLabelsByQuery", repoID, query)
	ret0, _ := ret[0].([]*github.LabelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLabelsByQuery indicates an expected call of SearchLabelsByQuery.
func (mr *MockClientMockRecorder) SearchLabelsByQuery(repoID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLabelsByQuery", reflect.TypeOf((*MockClient)(nil).SearchLabelsByQuery), repoID, query)
}
