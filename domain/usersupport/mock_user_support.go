// Code generated by MockGen. DO NOT EDIT.
// Source: user_support.go

// Package mock_usersupport is a generated GoMock package.
package mock_usersupport

import (
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	reflect "reflect"
	time "time"
)

// MockUserSupport is a mock of UserSupport interface
type MockUserSupport struct {
	ctrl     *gomock.Controller
	recorder *MockUserSupportMockRecorder
}

// MockUserSupportMockRecorder is the mock recorder for MockUserSupport
type MockUserSupportMockRecorder struct {
	mock *MockUserSupport
}

// NewMockUserSupport creates a new mock instance
func NewMockUserSupport(ctrl *gomock.Controller) *MockUserSupport {
	mock := &MockUserSupport{ctrl: ctrl}
	mock.recorder = &MockUserSupportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserSupport) EXPECT() *MockUserSupportMockRecorder {
	return m.recorder
}

// GetDailyReportStats mocks base method
func (m *MockUserSupport) GetDailyReportStats(until time.Time) (*dailyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyReportStats", until)
	ret0, _ := ret[0].(*dailyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyReportStats indicates an expected call of GetDailyReportStats
func (mr *MockUserSupportMockRecorder) GetDailyReportStats(until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyReportStats", reflect.TypeOf((*MockUserSupport)(nil).GetDailyReportStats), until)
}

// GetMonthlyReportStats mocks base method
func (m *MockUserSupport) GetMonthlyReportStats(since, until time.Time) (*monthlyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyReportStats", since, until)
	ret0, _ := ret[0].(*monthlyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyReportStats indicates an expected call of GetMonthlyReportStats
func (mr *MockUserSupportMockRecorder) GetMonthlyReportStats(since, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyReportStats", reflect.TypeOf((*MockUserSupport)(nil).GetMonthlyReportStats), since, until)
}

// GetAnalysisReportStats mocks base method
func (m *MockUserSupport) GetAnalysisReportStats(since, until time.Time) (*analysisStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalysisReportStats", since, until)
	ret0, _ := ret[0].(*analysisStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalysisReportStats indicates an expected call of GetAnalysisReportStats
func (mr *MockUserSupportMockRecorder) GetAnalysisReportStats(since, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalysisReportStats", reflect.TypeOf((*MockUserSupport)(nil).GetAnalysisReportStats), since, until)
}

// MethodTest mocks base method
func (m *MockUserSupport) MethodTest(since, until time.Time) (*analysisStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MethodTest", since, until)
	ret0, _ := ret[0].(*analysisStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MethodTest indicates an expected call of MethodTest
func (mr *MockUserSupportMockRecorder) MethodTest(since, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodTest", reflect.TypeOf((*MockUserSupport)(nil).MethodTest), since, until)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUpdatedSupportIssues mocks base method
func (m *MockRepository) GetUpdatedSupportIssues(since, until time.Time) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedSupportIssues", since, until)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdatedSupportIssues indicates an expected call of GetUpdatedSupportIssues
func (mr *MockRepositoryMockRecorder) GetUpdatedSupportIssues(since, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetUpdatedSupportIssues), since, until)
}

// GetClosedSupportIssues mocks base method
func (m *MockRepository) GetClosedSupportIssues(since, until time.Time) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosedSupportIssues", since, until)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosedSupportIssues indicates an expected call of GetClosedSupportIssues
func (mr *MockRepositoryMockRecorder) GetClosedSupportIssues(since, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosedSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetClosedSupportIssues), since, until)
}

// GetCurrentOpenNotUpdatedSupportIssues mocks base method
func (m *MockRepository) GetCurrentOpenNotUpdatedSupportIssues(until time.Time) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOpenNotUpdatedSupportIssues", until)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOpenNotUpdatedSupportIssues indicates an expected call of GetCurrentOpenNotUpdatedSupportIssues
func (mr *MockRepositoryMockRecorder) GetCurrentOpenNotUpdatedSupportIssues(until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOpenNotUpdatedSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetCurrentOpenNotUpdatedSupportIssues), until)
}

// GetCurrentOpenSupportIssues mocks base method
func (m *MockRepository) GetCurrentOpenSupportIssues() ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOpenSupportIssues")
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOpenSupportIssues indicates an expected call of GetCurrentOpenSupportIssues
func (mr *MockRepositoryMockRecorder) GetCurrentOpenSupportIssues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOpenSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetCurrentOpenSupportIssues))
}

// GetCurrentOpenAnyLabelsSupportIssues mocks base method
func (m *MockRepository) GetCurrentOpenAnyLabelsSupportIssues(state string, labels []string) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOpenAnyLabelsSupportIssues", state, labels)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOpenAnyLabelsSupportIssues indicates an expected call of GetCurrentOpenAnyLabelsSupportIssues
func (mr *MockRepositoryMockRecorder) GetCurrentOpenAnyLabelsSupportIssues(state, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOpenAnyLabelsSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetCurrentOpenAnyLabelsSupportIssues), state, labels)
}

// GetCurrentRepoLabels mocks base method
func (m *MockRepository) GetCurrentRepoLabels() ([]*github.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRepoLabels")
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRepoLabels indicates an expected call of GetCurrentRepoLabels
func (mr *MockRepositoryMockRecorder) GetCurrentRepoLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRepoLabels", reflect.TypeOf((*MockRepository)(nil).GetCurrentRepoLabels))
}

// GetLabelsByQuery mocks base method
func (m *MockRepository) GetLabelsByQuery(repoID int64, query string) (*github.LabelsSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsByQuery", repoID, query)
	ret0, _ := ret[0].(*github.LabelsSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLabelsByQuery indicates an expected call of GetLabelsByQuery
func (mr *MockRepositoryMockRecorder) GetLabelsByQuery(repoID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsByQuery", reflect.TypeOf((*MockRepository)(nil).GetLabelsByQuery), repoID, query)
}
