// Code generated by MockGen. DO NOT EDIT.
// Source: user_support.go

// Package usersupport is a generated GoMock package.
package usersupport

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
)

// MockUserSupport is a mock of UserSupport interface.
type MockUserSupport struct {
	ctrl     *gomock.Controller
	recorder *MockUserSupportMockRecorder
}

// MockUserSupportMockRecorder is the mock recorder for MockUserSupport.
type MockUserSupportMockRecorder struct {
	mock *MockUserSupport
}

// NewMockUserSupport creates a new mock instance.
func NewMockUserSupport(ctrl *gomock.Controller) *MockUserSupport {
	mock := &MockUserSupport{ctrl: ctrl}
	mock.recorder = &MockUserSupportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSupport) EXPECT() *MockUserSupportMockRecorder {
	return m.recorder
}

// GetAnalysisReportStats mocks base method.
func (m *MockUserSupport) GetAnalysisReportStats(since, until time.Time, state string, span int) (*AnalysisStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalysisReportStats", since, until, state, span)
	ret0, _ := ret[0].(*AnalysisStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalysisReportStats indicates an expected call of GetAnalysisReportStats.
func (mr *MockUserSupportMockRecorder) GetAnalysisReportStats(since, until, state, span interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalysisReportStats", reflect.TypeOf((*MockUserSupport)(nil).GetAnalysisReportStats), since, until, state, span)
}

// GetDailyReportStats mocks base method.
func (m *MockUserSupport) GetDailyReportStats(now time.Time, dayAgo int) (*DailyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyReportStats", now, dayAgo)
	ret0, _ := ret[0].(*DailyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyReportStats indicates an expected call of GetDailyReportStats.
func (mr *MockUserSupportMockRecorder) GetDailyReportStats(now, dayAgo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyReportStats", reflect.TypeOf((*MockUserSupport)(nil).GetDailyReportStats), now, dayAgo)
}

// GetKeywordReportStats mocks base method.
func (m *MockUserSupport) GetKeywordReportStats(until time.Time, kind string, span int) (*KeywordStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeywordReportStats", until, kind, span)
	ret0, _ := ret[0].(*KeywordStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeywordReportStats indicates an expected call of GetKeywordReportStats.
func (mr *MockUserSupportMockRecorder) GetKeywordReportStats(until, kind, span interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeywordReportStats", reflect.TypeOf((*MockUserSupport)(nil).GetKeywordReportStats), until, kind, span)
}

// GetLongTermReportStats mocks base method.
func (m *MockUserSupport) GetLongTermReportStats(until time.Time, kind string, span int) (*LongTermStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongTermReportStats", until, kind, span)
	ret0, _ := ret[0].(*LongTermStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLongTermReportStats indicates an expected call of GetLongTermReportStats.
func (mr *MockUserSupportMockRecorder) GetLongTermReportStats(until, kind, span interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongTermReportStats", reflect.TypeOf((*MockUserSupport)(nil).GetLongTermReportStats), until, kind, span)
}

// MethodTest mocks base method.
func (m *MockUserSupport) MethodTest(since, until time.Time) (*AnalysisStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MethodTest", since, until)
	ret0, _ := ret[0].(*AnalysisStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MethodTest indicates an expected call of MethodTest.
func (mr *MockUserSupportMockRecorder) MethodTest(since, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodTest", reflect.TypeOf((*MockUserSupport)(nil).MethodTest), since, until)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetClosedSupportIssues mocks base method.
func (m *MockRepository) GetClosedSupportIssues(since, until time.Time) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosedSupportIssues", since, until)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosedSupportIssues indicates an expected call of GetClosedSupportIssues.
func (mr *MockRepositoryMockRecorder) GetClosedSupportIssues(since, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosedSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetClosedSupportIssues), since, until)
}

// GetCreatedSupportIssues mocks base method.
func (m *MockRepository) GetCreatedSupportIssues(since, until time.Time) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedSupportIssues", since, until)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatedSupportIssues indicates an expected call of GetCreatedSupportIssues.
func (mr *MockRepositoryMockRecorder) GetCreatedSupportIssues(since, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetCreatedSupportIssues), since, until)
}

// GetCurrentOpenNotUpdatedSupportIssues mocks base method.
func (m *MockRepository) GetCurrentOpenNotUpdatedSupportIssues(until time.Time) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOpenNotUpdatedSupportIssues", until)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOpenNotUpdatedSupportIssues indicates an expected call of GetCurrentOpenNotUpdatedSupportIssues.
func (mr *MockRepositoryMockRecorder) GetCurrentOpenNotUpdatedSupportIssues(until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOpenNotUpdatedSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetCurrentOpenNotUpdatedSupportIssues), until)
}

// GetCurrentOpenSupportIssues mocks base method.
func (m *MockRepository) GetCurrentOpenSupportIssues() ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOpenSupportIssues")
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOpenSupportIssues indicates an expected call of GetCurrentOpenSupportIssues.
func (mr *MockRepositoryMockRecorder) GetCurrentOpenSupportIssues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOpenSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetCurrentOpenSupportIssues))
}

// GetLabelsByQuery mocks base method.
func (m *MockRepository) GetLabelsByQuery(query string) ([]*github.LabelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsByQuery", query)
	ret0, _ := ret[0].([]*github.LabelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelsByQuery indicates an expected call of GetLabelsByQuery.
func (mr *MockRepositoryMockRecorder) GetLabelsByQuery(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsByQuery", reflect.TypeOf((*MockRepository)(nil).GetLabelsByQuery), query)
}

// GetUpdatedSupportIssues mocks base method.
func (m *MockRepository) GetUpdatedSupportIssues(since, until time.Time) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedSupportIssues", since, until)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdatedSupportIssues indicates an expected call of GetUpdatedSupportIssues.
func (mr *MockRepositoryMockRecorder) GetUpdatedSupportIssues(since, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedSupportIssues", reflect.TypeOf((*MockRepository)(nil).GetUpdatedSupportIssues), since, until)
}
